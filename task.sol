
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;


contract task {

    uint32 public timestamp;

    string[] public SpisokDel;

    uint8 public taskCount = 0;

    struct Delo{
        string deloname;
        bool flag;
        uint timestampDelo;
    }

    //Delo myDelo = Delo("wefwef",true,1478431967);
    //string taskname = myDelo.deloname;

    
    mapping (uint8 => Delo) key; 
    
    constructor() public {
        require(tvm.pubkey() != 0, 101);
        require(msg.pubkey() == tvm.pubkey(), 102);
        tvm.accept();
        timestamp = now;
    }

    modifier checkOwnerAndAccept {                                           
		require(msg.pubkey() == tvm.pubkey(), 102);
		_;
	}

    function DobavitTask(string str) public checkOwnerAndAccept {
        tvm.accept();
        timestamp = now;
        taskCount++;
        key[taskCount] = Delo(str, false, timestamp);
    }

    function PolychitCountOpen() public checkOwnerAndAccept returns(uint){ 
        tvm.accept();
        uint OpenTask = 0;
        for(uint8 i = 0; i < taskCount; i++)
        {
            if(!key[i].flag)
            {
                OpenTask++;
            }
        }
        return OpenTask;
    }

    function Opisanie(int num) public checkOwnerAndAccept {  

    }

    function DeleteTask() public checkOwnerAndAccept { 
        tvm.accept();    
        delete SpisokDel;
        for(uint8 i = 0; i < taskCount; i++)
        {
            SpisokDel.push(key[i].deloname);
        }
    }

    function CompleteTask() public checkOwnerAndAccept returns (uint){     
        tvm.accept();
        uint CompleteTask = 0;
        for(uint8 i = 0; i < taskCount; i++)
        {
            if(key[i].flag)
            {
                CompleteTask++;
            }
        }
        return CompleteTask;
    }

}